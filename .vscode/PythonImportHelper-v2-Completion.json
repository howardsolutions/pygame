[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "constants",
        "description": "constants",
        "isExtraImport": true,
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PLAYER_RADIUS",
        "importPath": "constants",
        "description": "constants",
        "isExtraImport": true,
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PLAYER_TURN_SPEED",
        "importPath": "constants",
        "description": "constants",
        "isExtraImport": true,
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PLAYER_SPEED",
        "importPath": "constants",
        "description": "constants",
        "isExtraImport": true,
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "pygame;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame;",
        "description": "pygame;",
        "detail": "pygame;",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "player",
        "description": "player",
        "isExtraImport": true,
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "CircleShape",
        "importPath": "circleshape",
        "description": "circleshape",
        "isExtraImport": true,
        "detail": "circleshape",
        "documentation": {}
    },
    {
        "label": "CircleShape",
        "kind": 6,
        "importPath": "circleshape",
        "description": "circleshape",
        "peekOfCode": "class CircleShape(pygame.sprite.Sprite):\n    def __init__(self, x, y, radius):\n        if hasattr(self, \"containers\"):\n            super().__init__(self.containers)\n        else:\n            super().__init__()\n        self.position = pygame.Vector2(x, y)\n        self.velocity = pygame.Vector2(0, 0)\n        self.radius = radius\n    def draw(self, screen):",
        "detail": "circleshape",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "SCREEN_WIDTH = 1280\nSCREEN_HEIGHT = 720\nASTEROID_MIN_RADIUS = 20\nASTEROID_KINDS = 3\nASTEROID_SPAWN_RATE = 0.8  # seconds\nASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "SCREEN_HEIGHT = 720\nASTEROID_MIN_RADIUS = 20\nASTEROID_KINDS = 3\nASTEROID_SPAWN_RATE = 0.8  # seconds\nASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "ASTEROID_MIN_RADIUS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "ASTEROID_MIN_RADIUS = 20\nASTEROID_KINDS = 3\nASTEROID_SPAWN_RATE = 0.8  # seconds\nASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "ASTEROID_KINDS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "ASTEROID_KINDS = 3\nASTEROID_SPAWN_RATE = 0.8  # seconds\nASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "ASTEROID_SPAWN_RATE",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "ASTEROID_SPAWN_RATE = 0.8  # seconds\nASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "ASTEROID_MAX_RADIUS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "ASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS\nPLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PLAYER_RADIUS",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "PLAYER_RADIUS = 20\nPLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PLAYER_TURN_SPEED",
        "kind": 5,
        "importPath": "constants",
        "description": "constants",
        "peekOfCode": "PLAYER_TURN_SPEED = 300\nPLAYER_SPEED=200",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    #  init the game\n    pygame.init()\n    clock = pygame.time.Clock()\n    dt = 0\n    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n    player = Player(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2)\n    while True:\n        # check if the user has closed the window and exit the game loop\n        for event in pygame.event.get():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "player",
        "description": "player",
        "peekOfCode": "class Player(CircleShape):\n    def __init__(self, x, y):\n        super().__init__(x, y, PLAYER_RADIUS)\n        self.rotation = 0\n    # in the player class\n    def triangle(self):\n        forward = pygame.Vector2(0, 1).rotate(self.rotation)\n        right = pygame.Vector2(0, 1).rotate(self.rotation + 90) * self.radius / 1.5\n        a = self.position + forward * self.radius\n        b = self.position - forward * self.radius - right",
        "detail": "player",
        "documentation": {}
    }
]